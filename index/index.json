{
  "includedArchiveIdentifiers" : [
    "App"
  ],
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/country\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/country\/init(id:name:code:)",
                "title" : "init(id: String?, name: String, code: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/country\/code",
                "title" : "var code: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/country\/flagunicode",
                "title" : "var flagUnicode: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/country\/id-swift.property",
                "title" : "var id: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/country\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/country\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/country\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/decoderequest(_:)-50o70",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/decoderequest(_:)-7oi3c",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/country\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/country\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/country\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/country\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/boolean",
                    "title" : "Country.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/enum",
                    "title" : "Country.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/field",
                    "title" : "Country.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/group",
                    "title" : "Country.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/optionalboolean",
                    "title" : "Country.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/optionalenum",
                    "title" : "Country.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/optionalfield",
                    "title" : "Country.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/country\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/children",
                    "title" : "Country.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/compositechildren",
                    "title" : "Country.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/compositeid",
                    "title" : "Country.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/compositeoptionalchild",
                    "title" : "Country.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/compositeoptionalparent",
                    "title" : "Country.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/compositeparent",
                    "title" : "Country.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/id-swift.typealias",
                    "title" : "Country.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/optionalchild",
                    "title" : "Country.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/optionalparent",
                    "title" : "Country.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/parent",
                    "title" : "Country.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/siblings",
                    "title" : "Country.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/timestamp",
                    "title" : "Country.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/find(_:on:)-1w9u2",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/find(_:on:)-3a55b",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/country\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/country\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/country\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/country\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/country",
            "title" : "Country",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/event\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/event\/init(id:eventtitle:eventdescription:eventlocation:eventon:eventstartsat:eventendsat:eventoff:status:sort:usercreatedid:datecreated:userupdatedid:dateupdated:)",
                "title" : "init(id: UUID?, eventTitle: String, eventDescription: String, eventLocation: String, eventOn: Date, eventStartsAt: Date, eventEndsAt: Date, eventOff: Bool, status: String, sort: Int, userCreatedId: User.IDValue, dateCreated: Date, userUpdatedId: User.IDValue?, dateUpdated: Date?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/event\/datecreated",
                "title" : "var dateCreated: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/dateupdated",
                "title" : "var dateUpdated: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/eventdescription",
                "title" : "var eventDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/eventendsat",
                "title" : "var eventEndsAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/eventlocation",
                "title" : "var eventLocation: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/eventoff",
                "title" : "var eventOff: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/eventon",
                "title" : "var eventOn: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/eventstartsat",
                "title" : "var eventStartsAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/eventtitle",
                "title" : "var eventTitle: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/sort",
                "title" : "var sort: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/status",
                "title" : "var status: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/usercreated",
                "title" : "var userCreated: User",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/event\/userupdated",
                "title" : "var userUpdated: User?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/event\/todto()",
                "title" : "func toDTO() -> EventDTO",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/event\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/event\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/decoderequest(_:)-4gpmc",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/decoderequest(_:)-8fzaw",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/event\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/event\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/event\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/event\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/boolean",
                    "title" : "Event.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/enum",
                    "title" : "Event.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/field",
                    "title" : "Event.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/group",
                    "title" : "Event.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/optionalboolean",
                    "title" : "Event.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/optionalenum",
                    "title" : "Event.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/optionalfield",
                    "title" : "Event.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/event\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/children",
                    "title" : "Event.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/compositechildren",
                    "title" : "Event.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/compositeid",
                    "title" : "Event.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/compositeoptionalchild",
                    "title" : "Event.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/compositeoptionalparent",
                    "title" : "Event.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/compositeparent",
                    "title" : "Event.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/id-swift.typealias",
                    "title" : "Event.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/optionalchild",
                    "title" : "Event.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/optionalparent",
                    "title" : "Event.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/parent",
                    "title" : "Event.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/siblings",
                    "title" : "Event.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/timestamp",
                    "title" : "Event.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/find(_:on:)-1w6u7",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/find(_:on:)-36e3w",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/event\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/event\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/event\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/event\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/event",
            "title" : "Event",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filechunks\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/filechunks\/init(id:chunknumber:chunksize:chunkdata:fileid:)",
                "title" : "init(id: UUID?, chunkNumber: Int, chunkSize: Int, chunkData: Data, fileID: UUID)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filechunks\/chunkdata",
                "title" : "var chunkData: Data",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filechunks\/chunknumber",
                "title" : "var chunkNumber: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filechunks\/chunksize",
                "title" : "var chunkSize: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filechunks\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filechunks\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/decoderequest(_:)-2toow",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/decoderequest(_:)-33d80",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/boolean",
                    "title" : "FileChunks.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/enum",
                    "title" : "FileChunks.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/field",
                    "title" : "FileChunks.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/group",
                    "title" : "FileChunks.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/optionalboolean",
                    "title" : "FileChunks.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/optionalenum",
                    "title" : "FileChunks.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/optionalfield",
                    "title" : "FileChunks.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/children",
                    "title" : "FileChunks.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/compositechildren",
                    "title" : "FileChunks.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/compositeid",
                    "title" : "FileChunks.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/compositeoptionalchild",
                    "title" : "FileChunks.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/compositeoptionalparent",
                    "title" : "FileChunks.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/compositeparent",
                    "title" : "FileChunks.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/id-swift.typealias",
                    "title" : "FileChunks.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/optionalchild",
                    "title" : "FileChunks.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/optionalparent",
                    "title" : "FileChunks.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/parent",
                    "title" : "FileChunks.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/siblings",
                    "title" : "FileChunks.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/timestamp",
                    "title" : "FileChunks.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/find(_:on:)-2n33v",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/find(_:on:)-5g2zg",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filechunks\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/filechunks\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/filechunks",
            "title" : "FileChunks",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/init(id:filename:filesize:filetype:uploaddate:storagetype:)",
                "title" : "init(id: UUID?, fileName: String, fileSize: Int, fileType: String, uploadDate: Date, storageType: StorageType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/filename",
                "title" : "var fileName: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/filesize",
                "title" : "var fileSize: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/filetype",
                "title" : "var fileType: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/storagetype",
                "title" : "var storageType: StorageType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/uploaddate",
                "title" : "var uploadDate: Date",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/todto()",
                "title" : "func toDTO() -> FileModelDTO",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filemodel\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/decoderequest(_:)-3vq8l",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/decoderequest(_:)-5e00f",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/boolean",
                    "title" : "FileModel.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/enum",
                    "title" : "FileModel.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/field",
                    "title" : "FileModel.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/group",
                    "title" : "FileModel.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/optionalboolean",
                    "title" : "FileModel.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/optionalenum",
                    "title" : "FileModel.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/optionalfield",
                    "title" : "FileModel.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/children",
                    "title" : "FileModel.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/compositechildren",
                    "title" : "FileModel.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/compositeid",
                    "title" : "FileModel.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/compositeoptionalchild",
                    "title" : "FileModel.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/compositeoptionalparent",
                    "title" : "FileModel.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/compositeparent",
                    "title" : "FileModel.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/id-swift.typealias",
                    "title" : "FileModel.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/optionalchild",
                    "title" : "FileModel.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/optionalparent",
                    "title" : "FileModel.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/parent",
                    "title" : "FileModel.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/siblings",
                    "title" : "FileModel.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/timestamp",
                    "title" : "FileModel.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/find(_:on:)-2p4h2",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/find(_:on:)-9aw2c",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodel\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/filemodel\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/filemodel",
            "title" : "FileModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/key\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/key\/init(kid:keytype:keydata:createdat:updatedat:status:)",
                "title" : "init(kid: UUID, keyType: Key.KeyType, keyData: String, createdAt: Date?, updatedAt: Date?, status: Status)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/key\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/key\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/key\/keydata",
                "title" : "var keyData: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/key\/keytype-swift.property",
                "title" : "var keyType: Key.KeyType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/key\/kid",
                "title" : "var kid: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/key\/status",
                "title" : "var status: Status",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/key\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/key\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/keytype-swift.enum\/privatekey",
                    "title" : "case privateKey",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/keytype-swift.enum\/publickey",
                    "title" : "case publicKey",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/keytype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/key\/keytype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/app\/key\/keytype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/key\/keytype-swift.enum\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/app\/key\/keytype-swift.enum\/init(postgresdata:)",
                        "title" : "init?(postgresData: PostgresData)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/key\/keytype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/app\/key\/keytype-swift.enum\/postgresdata",
                        "title" : "var postgresData: PostgresData?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/key\/keytype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/app\/key\/keytype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/key\/keytype-swift.enum\/postgresdatatype",
                        "title" : "static var postgresDataType: PostgresDataType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/app\/key\/keytype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/app\/key\/keytype-swift.enum",
                "title" : "Key.KeyType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/key\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/decoderequest(_:)-53qqt",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/decoderequest(_:)-7bglf",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/key\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/key\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/key\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/key\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/boolean",
                    "title" : "Key.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/enum",
                    "title" : "Key.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/field",
                    "title" : "Key.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/group",
                    "title" : "Key.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/optionalboolean",
                    "title" : "Key.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/optionalenum",
                    "title" : "Key.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/optionalfield",
                    "title" : "Key.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/key\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/children",
                    "title" : "Key.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/compositechildren",
                    "title" : "Key.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/compositeid",
                    "title" : "Key.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/compositeoptionalchild",
                    "title" : "Key.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/compositeoptionalparent",
                    "title" : "Key.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/compositeparent",
                    "title" : "Key.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/id-swift.typealias",
                    "title" : "Key.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/optionalchild",
                    "title" : "Key.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/optionalparent",
                    "title" : "Key.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/parent",
                    "title" : "Key.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/siblings",
                    "title" : "Key.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/timestamp",
                    "title" : "Key.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/find(_:on:)-24b02",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/find(_:on:)-4q8vt",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/key\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/key\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/key\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/key\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/key",
            "title" : "Key",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestream\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/livestream\/init(id:title:coverurl:content:streamtype:streamurl:status:usercreatedid:scheduledfor:)",
                "title" : "init(id: UUID?, title: String, coverUrl: UUID, content: String, streamType: LivestreamStreamType, streamUrl: String, status: String, userCreatedId: UUID, scheduledFor: Date?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestream\/content",
                "title" : "var content: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/coverurl",
                "title" : "var coverUrl: FileModel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/scheduledfor",
                "title" : "var scheduledFor: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/status",
                "title" : "var status: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/streamtype",
                "title" : "var streamType: LivestreamStreamType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/streamurl",
                "title" : "var streamUrl: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestream\/usercreated",
                "title" : "var userCreated: User",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestream\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/decoderequest(_:)-4qbwy",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/decoderequest(_:)-6vits",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/boolean",
                    "title" : "Livestream.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/enum",
                    "title" : "Livestream.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/field",
                    "title" : "Livestream.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/group",
                    "title" : "Livestream.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/optionalboolean",
                    "title" : "Livestream.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/optionalenum",
                    "title" : "Livestream.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/optionalfield",
                    "title" : "Livestream.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/children",
                    "title" : "Livestream.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/compositechildren",
                    "title" : "Livestream.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/compositeid",
                    "title" : "Livestream.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/compositeoptionalchild",
                    "title" : "Livestream.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/compositeoptionalparent",
                    "title" : "Livestream.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/compositeparent",
                    "title" : "Livestream.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/id-swift.typealias",
                    "title" : "Livestream.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/optionalchild",
                    "title" : "Livestream.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/optionalparent",
                    "title" : "Livestream.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/parent",
                    "title" : "Livestream.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/siblings",
                    "title" : "Livestream.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/timestamp",
                    "title" : "Livestream.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/find(_:on:)-4muc",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/find(_:on:)-8c8dh",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/livestream\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/livestream\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/livestream",
            "title" : "Livestream",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/init(id:month:year:sourcefileid:usercreatedid:createdat:updatedat:status:)",
                "title" : "init(id: UUID?, month: Int, year: Int, sourceFileId: FileModel.IDValue, userCreatedId: User.IDValue, createdAt: Date?, updatedAt: Date?, status: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/month",
                "title" : "var month: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/sourcefile",
                "title" : "var sourceFile: FileModel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/usercreated",
                "title" : "var userCreated: User",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/year",
                "title" : "var year: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/todto()",
                "title" : "func toDTO() -> NewsLetterDTO",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newsletter\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/decoderequest(_:)-5yqug",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/decoderequest(_:)-7melz",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/boolean",
                    "title" : "NewsLetter.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/enum",
                    "title" : "NewsLetter.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/field",
                    "title" : "NewsLetter.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/group",
                    "title" : "NewsLetter.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/optionalboolean",
                    "title" : "NewsLetter.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/optionalenum",
                    "title" : "NewsLetter.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/optionalfield",
                    "title" : "NewsLetter.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/children",
                    "title" : "NewsLetter.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/compositechildren",
                    "title" : "NewsLetter.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/compositeid",
                    "title" : "NewsLetter.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/compositeoptionalchild",
                    "title" : "NewsLetter.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/compositeoptionalparent",
                    "title" : "NewsLetter.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/compositeparent",
                    "title" : "NewsLetter.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/id-swift.typealias",
                    "title" : "NewsLetter.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/optionalchild",
                    "title" : "NewsLetter.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/optionalparent",
                    "title" : "NewsLetter.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/parent",
                    "title" : "NewsLetter.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/siblings",
                    "title" : "NewsLetter.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/timestamp",
                    "title" : "NewsLetter.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/find(_:on:)-1pqiw",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/find(_:on:)-29f6m",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletter\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/newsletter\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/newsletter",
            "title" : "NewsLetter",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/restreamtoken\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/restreamtoken\/init(id:accesstoken:refreshtoken:expiresat:userid:)",
                "title" : "init(id: UUID?, accessToken: String, refreshToken: String, expiresAt: Date, userID: User.IDValue)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/restreamtoken\/accesstoken",
                "title" : "var accessToken: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/restreamtoken\/expiresat",
                "title" : "var expiresAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/restreamtoken\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/restreamtoken\/refreshtoken",
                "title" : "var refreshToken: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/restreamtoken\/user",
                "title" : "var user: User",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/restreamtoken\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/decoderequest(_:)-30so2",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/decoderequest(_:)-6n6xj",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/boolean",
                    "title" : "RestreamToken.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/enum",
                    "title" : "RestreamToken.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/field",
                    "title" : "RestreamToken.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/group",
                    "title" : "RestreamToken.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/optionalboolean",
                    "title" : "RestreamToken.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/optionalenum",
                    "title" : "RestreamToken.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/optionalfield",
                    "title" : "RestreamToken.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/children",
                    "title" : "RestreamToken.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/compositechildren",
                    "title" : "RestreamToken.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/compositeid",
                    "title" : "RestreamToken.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/compositeoptionalchild",
                    "title" : "RestreamToken.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/compositeoptionalparent",
                    "title" : "RestreamToken.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/compositeparent",
                    "title" : "RestreamToken.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/id-swift.typealias",
                    "title" : "RestreamToken.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/optionalchild",
                    "title" : "RestreamToken.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/optionalparent",
                    "title" : "RestreamToken.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/parent",
                    "title" : "RestreamToken.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/siblings",
                    "title" : "RestreamToken.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/timestamp",
                    "title" : "RestreamToken.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/find(_:on:)-3vm7j",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/find(_:on:)-58eri",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/restreamtoken\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/restreamtoken\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/restreamtoken",
            "title" : "RestreamToken",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/rolepermission\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/rolepermission\/init(id:name:permissions:)",
                "title" : "init(id: UUID?, name: String, permissions: [Permission])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/rolepermission\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/rolepermission\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/rolepermission\/permissions",
                "title" : "var permissions: [Permission]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/rolepermission\/users",
                "title" : "var users: [User]",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/rolepermission\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/decoderequest(_:)-2455f",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/decoderequest(_:)-6hglu",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/boolean",
                    "title" : "RolePermission.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/enum",
                    "title" : "RolePermission.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/field",
                    "title" : "RolePermission.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/group",
                    "title" : "RolePermission.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/optionalboolean",
                    "title" : "RolePermission.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/optionalenum",
                    "title" : "RolePermission.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/optionalfield",
                    "title" : "RolePermission.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/children",
                    "title" : "RolePermission.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/compositechildren",
                    "title" : "RolePermission.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/compositeid",
                    "title" : "RolePermission.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/compositeoptionalchild",
                    "title" : "RolePermission.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/compositeoptionalparent",
                    "title" : "RolePermission.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/compositeparent",
                    "title" : "RolePermission.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/id-swift.typealias",
                    "title" : "RolePermission.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/optionalchild",
                    "title" : "RolePermission.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/optionalparent",
                    "title" : "RolePermission.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/parent",
                    "title" : "RolePermission.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/siblings",
                    "title" : "RolePermission.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/timestamp",
                    "title" : "RolePermission.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/find(_:on:)-6ppqk",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/find(_:on:)-80tai",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/rolepermission\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/rolepermission\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/rolepermission",
            "title" : "RolePermission",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/todo\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/todo\/init(id:title:)",
                "title" : "init(id: UUID?, title: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/todo\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/todo\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/todo\/todto()",
                "title" : "func toDTO() -> TodoDTO",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/todo\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/todo\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/todo\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/todo\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/todo\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/boolean",
                    "title" : "Todo.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/enum",
                    "title" : "Todo.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/field",
                    "title" : "Todo.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/group",
                    "title" : "Todo.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/optionalboolean",
                    "title" : "Todo.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/optionalenum",
                    "title" : "Todo.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/optionalfield",
                    "title" : "Todo.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/todo\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/children",
                    "title" : "Todo.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/compositechildren",
                    "title" : "Todo.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/compositeid",
                    "title" : "Todo.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/compositeoptionalchild",
                    "title" : "Todo.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/compositeoptionalparent",
                    "title" : "Todo.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/compositeparent",
                    "title" : "Todo.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/id-swift.typealias",
                    "title" : "Todo.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/optionalchild",
                    "title" : "Todo.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/optionalparent",
                    "title" : "Todo.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/parent",
                    "title" : "Todo.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/siblings",
                    "title" : "Todo.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/timestamp",
                    "title" : "Todo.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/find(_:on:)-2sd0t",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/find(_:on:)-6y7ck",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/todo\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/todo\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/todo\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/todo",
            "title" : "Todo",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/token\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/token\/init(id:tokenvalue:hashedrefreshtoken:userid:createdat:expiresat:refreshtokenexpiresat:status:)",
                "title" : "init(id: UUID?, tokenValue: String, hashedRefreshToken: String?, userID: Token.User.IDValue, createdAt: Date, expiresAt: Date, refreshTokenExpiresAt: Date, status: TokenStatus)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/token\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/token\/expiresat",
                "title" : "var expiresAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/token\/hashedrefreshtoken",
                "title" : "var hashedRefreshToken: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/token\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/token\/refreshtokenexpiresat",
                "title" : "var refreshTokenExpiresAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/token\/status",
                "title" : "var status: TokenStatus",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/token\/tokenvalue",
                "title" : "var tokenValue: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/token\/user-swift.property",
                "title" : "var user: Token.User",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/token\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/token\/authenticate(token:for:)",
                "title" : "static func authenticate(token: String, for: Request) async throws -> Token.User",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/token\/generate(for:using:)",
                "title" : "static func generate(for: Token.User, using: Request) async throws -> (Token, String)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/token\/hashrefreshtoken(_:)",
                "title" : "static func hashRefreshToken(String) throws -> String",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/token\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/guardmiddleware(throwing:)",
                    "title" : "static func guardMiddleware(throwing: any Error) -> any Middleware",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/redirectmiddleware(makepath:)",
                    "title" : "static func redirectMiddleware(makePath: (Request) -> String) -> any Middleware",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/redirectmiddleware(path:)",
                    "title" : "static func redirectMiddleware(path: String) -> any Middleware",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/token\/authenticatable-implementations",
                "title" : "Authenticatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/decoderequest(_:)-4u3yo",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/decoderequest(_:)-ic3l",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/token\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/token\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/token\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/token\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/boolean",
                    "title" : "Token.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/enum",
                    "title" : "Token.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/field",
                    "title" : "Token.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/group",
                    "title" : "Token.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/optionalboolean",
                    "title" : "Token.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/optionalenum",
                    "title" : "Token.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/optionalfield",
                    "title" : "Token.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/token\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/children",
                    "title" : "Token.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/compositechildren",
                    "title" : "Token.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/compositeid",
                    "title" : "Token.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/compositeoptionalchild",
                    "title" : "Token.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/compositeoptionalparent",
                    "title" : "Token.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/compositeparent",
                    "title" : "Token.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/id-swift.typealias",
                    "title" : "Token.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/optionalchild",
                    "title" : "Token.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/optionalparent",
                    "title" : "Token.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/parent",
                    "title" : "Token.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/siblings",
                    "title" : "Token.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/timestamp",
                    "title" : "Token.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/find(_:on:)-1akxe",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/find(_:on:)-8d3ot",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/token\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/isvalid",
                    "title" : "var isValid: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/user-swift.typealias",
                    "title" : "Token.User",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/userkey",
                    "title" : "static let userKey: KeyPath<Token, ParentProperty<Token, Token.User>>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/valuekey",
                    "title" : "static let valueKey: KeyPath<Token, FieldProperty<Token, String>>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/authenticator(database:)",
                    "title" : "static func authenticator(database: DatabaseID?) -> any Authenticator",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/token\/modeltokenauthenticatable-implementations",
                "title" : "ModelTokenAuthenticatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/token\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/token\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/token\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/token",
            "title" : "Token",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/user\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/user\/init(id:firstname:lastname:email:password:status:role:provider:provideruserid:externalidentifier:memberid:accounttype:emailverified:phonenumberverified:phonenumber:rfid:lifegroupname:address:area:)",
                "title" : "init(id: UUID?, firstName: String?, lastName: String?, email: String, password: String, status: Status?, role: [Roles]?, provider: Provider, providerUserId: String?, externalIdentifier: String?, memberId: String?, accountType: AccountType, emailVerified: Bool?, phoneNumberVerified: Bool?, phoneNumber: String?, rfid: String?, lifegroupName: String?, address: String?, area: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/user\/accounttype",
                "title" : "var accountType: AccountType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/address",
                "title" : "var address: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/area",
                "title" : "var area: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/email",
                "title" : "var email: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/emailverified",
                "title" : "var emailVerified: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/externalidentifier",
                "title" : "var externalIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/firstname",
                "title" : "var firstName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/lastname",
                "title" : "var lastName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/lifegroupname",
                "title" : "var lifegroupName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/memberid",
                "title" : "var memberId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/password",
                "title" : "var password: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/phonenumber",
                "title" : "var phoneNumber: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/phonenumberverified",
                "title" : "var phoneNumberVerified: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/provider",
                "title" : "var provider: Provider",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/provideruserid",
                "title" : "var providerUserId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/rfid",
                "title" : "var rfid: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/role",
                "title" : "var role: [Roles]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/rolepermissions",
                "title" : "var rolePermissions: [RolePermission]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/user\/status",
                "title" : "var status: Status",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/user\/todto()",
                "title" : "func toDTO() -> UserDTO",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/user\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/user\/ensureuniqueness(for:on:)",
                "title" : "static func ensureUniqueness(for: User, on: Request) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/user\/uniqueusername(forfirstname:lastname:)",
                "title" : "static func uniqueUsername(forFirstName: String, lastName: String) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/user\/uniqueness(foremail:on:)",
                "title" : "static func uniqueness(forEmail: String, on: Request) async throws -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/user\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/guardmiddleware(throwing:)",
                    "title" : "static func guardMiddleware(throwing: any Error) -> any Middleware",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/redirectmiddleware(makepath:)",
                    "title" : "static func redirectMiddleware(makePath: (Request) -> String) -> any Middleware",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/redirectmiddleware(path:)",
                    "title" : "static func redirectMiddleware(path: String) -> any Middleware",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/user\/authenticatable-implementations",
                "title" : "Authenticatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/decoderequest(_:)-4tv5u",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/decoderequest(_:)-7a92w",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/user\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/user\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/user\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/user\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/boolean",
                    "title" : "User.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/enum",
                    "title" : "User.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/field",
                    "title" : "User.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/group",
                    "title" : "User.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/optionalboolean",
                    "title" : "User.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/optionalenum",
                    "title" : "User.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/optionalfield",
                    "title" : "User.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/user\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/children",
                    "title" : "User.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/compositechildren",
                    "title" : "User.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/compositeid",
                    "title" : "User.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/compositeoptionalchild",
                    "title" : "User.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/compositeoptionalparent",
                    "title" : "User.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/compositeparent",
                    "title" : "User.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/id-swift.typealias",
                    "title" : "User.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/optionalchild",
                    "title" : "User.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/optionalparent",
                    "title" : "User.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/parent",
                    "title" : "User.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/siblings",
                    "title" : "User.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/timestamp",
                    "title" : "User.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/find(_:on:)-1drwg",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/find(_:on:)-35hq0",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/user\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/verify(password:)",
                    "title" : "func verify(password: String) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/passwordhashkey",
                    "title" : "static let passwordHashKey: KeyPath<User, FieldProperty<User, String>>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/usernamekey",
                    "title" : "static let usernameKey: KeyPath<User, FieldProperty<User, String>>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/authenticator(database:)",
                    "title" : "static func authenticator(database: DatabaseID?) -> any Authenticator",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/user\/modelauthenticatable-implementations",
                "title" : "ModelAuthenticatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/user\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/user\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/user\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/user",
            "title" : "User",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userrolepermission\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/userrolepermission\/init(id:user:rolepermission:)",
                "title" : "init(id: UUID?, user: User, rolePermission: RolePermission) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userrolepermission\/id-swift.property",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userrolepermission\/rolepermission",
                "title" : "var rolePermission: RolePermission",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userrolepermission\/user",
                "title" : "var user: User",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userrolepermission\/schema",
                "title" : "static let schema: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/anyid",
                    "title" : "var anyID: any AnyID",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/joined(_:)",
                    "title" : "func joined<Joined>(Joined.Type) throws -> Joined",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/alias",
                    "title" : "static var alias: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/userrolepermission\/anymodel-implementations",
                "title" : "AnyModel Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/userrolepermission\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/app\/userrolepermission\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/userrolepermission\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/codableproperties",
                    "title" : "var codableProperties: [SomeCodingKey : any AnyCodableProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/databaseproperties",
                    "title" : "var databaseProperties: [any AnyDatabaseProperty]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/haschanges",
                    "title" : "var hasChanges: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/properties",
                    "title" : "var properties: [any AnyProperty]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/collectinput(withdefaultedvalues:)",
                    "title" : "func collectInput(withDefaultedValues: Bool) -> [FieldKey : DatabaseQuery.Value]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/input(to:)",
                    "title" : "func input(to: any DatabaseInput)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/output(from:)",
                    "title" : "func output(from: any DatabaseOutput) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/boolean",
                    "title" : "UserRolePermission.Boolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/enum",
                    "title" : "UserRolePermission.Enum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/field",
                    "title" : "UserRolePermission.Field",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/group",
                    "title" : "UserRolePermission.Group",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/optionalboolean",
                    "title" : "UserRolePermission.OptionalBoolean",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/optionalenum",
                    "title" : "UserRolePermission.OptionalEnum",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/optionalfield",
                    "title" : "UserRolePermission.OptionalField",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/keys",
                    "title" : "static var keys: [FieldKey]",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/path(for:)",
                    "title" : "static func path<Property>(for: KeyPath<Self, Property>) -> [FieldKey]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/userrolepermission\/fields-implementations",
                "title" : "Fields Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/_$id",
                    "title" : "var _$id: Self.ID<Self.IDValue>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/_$idexists",
                    "title" : "var _$idExists: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/create(on:)",
                    "title" : "func create(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/delete(force:on:)",
                    "title" : "func delete(force: Bool, on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/requireid()",
                    "title" : "func requireID() throws -> Self.IDValue",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/restore(on:)",
                    "title" : "func restore(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/save(on:)",
                    "title" : "func save(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/update(on:)",
                    "title" : "func update(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/children",
                    "title" : "UserRolePermission.Children",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/compositechildren",
                    "title" : "UserRolePermission.CompositeChildren",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/compositeid",
                    "title" : "UserRolePermission.CompositeID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/compositeoptionalchild",
                    "title" : "UserRolePermission.CompositeOptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/compositeoptionalparent",
                    "title" : "UserRolePermission.CompositeOptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/compositeparent",
                    "title" : "UserRolePermission.CompositeParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/id-swift.typealias",
                    "title" : "UserRolePermission.ID",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/optionalchild",
                    "title" : "UserRolePermission.OptionalChild",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/optionalparent",
                    "title" : "UserRolePermission.OptionalParent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/parent",
                    "title" : "UserRolePermission.Parent",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/siblings",
                    "title" : "UserRolePermission.Siblings",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/timestamp",
                    "title" : "UserRolePermission.Timestamp",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/find(_:on:)-1ecoq",
                    "title" : "static func find(Self.IDValue?, on: any Database) -> EventLoopFuture<Self?>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/find(_:on:)-2pkux",
                    "title" : "static func find(Self.IDValue?, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/query(on:)",
                    "title" : "static func query(on: any Database) -> QueryBuilder<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/userrolepermission\/model-implementations",
                "title" : "Model Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/schemaoralias",
                    "title" : "static var schemaOrAlias: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/space",
                    "title" : "static var space: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/userrolepermission\/spaceifnotaliased",
                    "title" : "static var spaceIfNotAliased: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/userrolepermission\/schema-implementations",
                "title" : "Schema Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/userrolepermission",
            "title" : "UserRolePermission",
            "type" : "class"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/authenicationcontrollerv1\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/authenicationcontrollerv1\/boot(routes:)",
                "title" : "func boot(routes: any RoutesBuilder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/authenicationcontrollerv1\/enhancedlogouthandler(_:)",
                "title" : "func enhancedLogoutHandler(Request) async throws -> HTTPStatus",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/authenicationcontrollerv1\/loginhandler(_:)",
                "title" : "func loginHandler(Request) async throws -> TokenDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/authenicationcontrollerv1\/loginwithproviderhandler(_:)",
                "title" : "func loginWithProviderHandler(Request) async throws -> TokenDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/authenicationcontrollerv1\/refreshhandler(_:)",
                "title" : "func refreshHandler(Request) async throws -> TokenDTO",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/app\/authenicationcontrollerv1",
            "title" : "AuthenicationControllerV1",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/authenticationinitializer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/authenticationinitializer\/handlerestreamcallback(req:accesstoken:)",
                "title" : "func handleRestreamCallback(req: Request, accessToken: String) async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/authenticationinitializer\/setupoauthroutes(_:)",
                "title" : "func setupOAuthRoutes(any RoutesBuilder) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/authenticationinitializer\/willboot(_:)",
                "title" : "func willBoot(Application) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/authenticationinitializer\/didboot(_:)",
                    "title" : "func didBoot(Application) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/authenticationinitializer\/didbootasync(_:)",
                    "title" : "func didBootAsync(Application) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/authenticationinitializer\/shutdown(_:)",
                    "title" : "func shutdown(Application)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/authenticationinitializer\/shutdownasync(_:)",
                    "title" : "func shutdownAsync(Application) async",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/authenticationinitializer\/willbootasync(_:)",
                    "title" : "func willBootAsync(Application) async throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/authenticationinitializer\/lifecyclehandler-implementations",
                "title" : "LifecycleHandler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/authenticationinitializer",
            "title" : "AuthenticationInitializer",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/certificatecontroller\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/certificatecontroller\/boot(routes:)",
                "title" : "func boot(routes: any RoutesBuilder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/certificatecontroller\/fetchpublickey(req:)",
                "title" : "func fetchPublicKey(req: Request) async throws -> [String : String]",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/app\/certificatecontroller",
            "title" : "CertificateController",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createkey\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createkey\/prepare(on:)-78wp4",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/createkey\/revert(on:)-5q21v",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createkey\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/createkey\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createkey\/prepare(on:)-4c662",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/createkey\/revert(on:)-1es6q",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/createkey\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/createkey",
            "title" : "CreateKey",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createrestreamtoken\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createrestreamtoken\/prepare(on:)-4erm5",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/createrestreamtoken\/revert(on:)-22e3j",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createrestreamtoken\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/createrestreamtoken\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createrestreamtoken\/prepare(on:)-7x8o6",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/createrestreamtoken\/revert(on:)-5kzqg",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/createrestreamtoken\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/createrestreamtoken",
            "title" : "CreateRestreamToken",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createrolepermission\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createrolepermission\/prepare(on:)-6jk0y",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/createrolepermission\/revert(on:)-54ysb",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createrolepermission\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/createrolepermission\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createrolepermission\/prepare(on:)-5ect1",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/createrolepermission\/revert(on:)-b6j7",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/createrolepermission\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/createrolepermission",
            "title" : "CreateRolePermission",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createtoken\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createtoken\/prepare(on:)-3cw2k",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/createtoken\/revert(on:)-6v4yv",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createtoken\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/createtoken\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createtoken\/prepare(on:)-294lv",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/createtoken\/revert(on:)-18knx",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/createtoken\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/createtoken",
            "title" : "CreateToken",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createuser\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createuser\/prepare(on:)-8exrr",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/createuser\/revert(on:)-6khxp",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createuser\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/createuser\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createuser\/prepare(on:)-83v1w",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/createuser\/revert(on:)-7h934",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/createuser\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/createuser",
            "title" : "CreateUser",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createuserrolepermission\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/createuserrolepermission\/prepare(on:)-788kv",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/createuserrolepermission\/revert(on:)-716uj",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createuserrolepermission\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/createuserrolepermission\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/createuserrolepermission\/prepare(on:)-9hnqq",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/createuserrolepermission\/revert(on:)-2nwqu",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/createuserrolepermission\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/createuserrolepermission",
            "title" : "CreateUserRolePermission",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/eventcontroller\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/eventcontroller\/boot(routes:)",
                "title" : "func boot(routes: any RoutesBuilder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/eventcontroller\/create(req:)",
                "title" : "func create(req: Request) async throws -> EventDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/eventcontroller\/delete(req:)",
                "title" : "func delete(req: Request) async throws -> HTTPStatus",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/eventcontroller\/index(req:)",
                "title" : "func index(req: Request) async throws -> Page<EventDTO>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/eventcontroller\/show(req:)",
                "title" : "func show(req: Request) async throws -> EventDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/eventcontroller\/update(req:)",
                "title" : "func update(req: Request) async throws -> EventDTO",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/app\/eventcontroller",
            "title" : "EventController",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/init(id:eventtitle:eventdescription:eventlocation:eventon:eventstartsat:eventendsat:eventoff:status:sort:usercreated:datecreated:userupdated:dateupdated:)",
                "title" : "init(id: UUID?, eventTitle: String, eventDescription: String, eventLocation: String, eventOn: Date, eventStartsAt: Date, eventEndsAt: Date, eventOff: Bool, status: String, sort: Int, userCreated: UserDTO?, dateCreated: Date, userUpdated: UserDTO?, dateUpdated: Date?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/datecreated",
                "title" : "var dateCreated: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/dateupdated",
                "title" : "var dateUpdated: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/eventdescription",
                "title" : "var eventDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/eventendsat",
                "title" : "var eventEndsAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/eventlocation",
                "title" : "var eventLocation: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/eventoff",
                "title" : "var eventOff: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/eventon",
                "title" : "var eventOn: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/eventstartsat",
                "title" : "var eventStartsAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/eventtitle",
                "title" : "var eventTitle: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/id",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/sort",
                "title" : "var sort: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/status",
                "title" : "var status: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/usercreated",
                "title" : "var userCreated: UserDTO?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/userupdated",
                "title" : "var userUpdated: UserDTO?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/converttopublic()",
                "title" : "func convertToPublic() -> EventDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/eventdto\/tomodel()",
                "title" : "func toModel() -> Event",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/eventdto\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/eventdto\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/eventdto\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/eventdto\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/eventdto\/decoderequest(_:)-8fefs",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/eventdto\/decoderequest(_:)-9fm5j",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/eventdto\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/eventdto\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/eventdto\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/eventdto",
            "title" : "EventDTO",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/init(id:filename:filesize:filetype:uploaddate:storagetype:)",
                "title" : "init(id: UUID?, fileName: String, fileSize: Int, fileType: String, uploadDate: Date, storageType: StorageType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/filename",
                "title" : "var fileName: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/filesize",
                "title" : "var fileSize: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/filetype",
                "title" : "var fileType: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/id",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/storagetype",
                "title" : "var storageType: StorageType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/uploaddate",
                "title" : "var uploadDate: Date",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/filemodeldto\/tomodel()",
                "title" : "func toModel() -> FileModel",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodeldto\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodeldto\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodeldto\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodeldto\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodeldto\/decoderequest(_:)-124f1",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodeldto\/decoderequest(_:)-999iw",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filemodeldto\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/filemodeldto\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/filemodeldto\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/filemodeldto",
            "title" : "FileModelDTO",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/fileuploadmiddleware\/init(allowedextensions:allowedcontenttypes:)",
                "title" : "init(allowedExtensions: Set<FileExtension>, allowedContentTypes: Set<ContentType>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/fileuploadmiddleware\/allowedcontenttypes",
                "title" : "let allowedContentTypes: Set<ContentType>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/fileuploadmiddleware\/allowedextensions",
                "title" : "let allowedExtensions: Set<FileExtension>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/fileuploadmiddleware\/respond(to:chainingto:)-7ho5l",
                "title" : "func respond(to: Request, chainingTo: any AsyncResponder) async throws -> Response",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fileuploadmiddleware\/respond(to:chainingto:)-3xz8c",
                    "title" : "func respond(to: Request, chainingTo: any Responder) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/fileuploadmiddleware\/asyncmiddleware-implementations",
                "title" : "AsyncMiddleware Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fileuploadmiddleware\/makeresponder(chainingto:)",
                    "title" : "func makeResponder(chainingTo: any Responder) -> any Responder",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/fileuploadmiddleware\/middleware-implementations",
                "title" : "Middleware Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/fileuploadmiddleware",
            "title" : "FileUploadMiddleware",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/keydto\/init(data:)",
                "title" : "init(data: [String : String])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/keydto\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/keydto\/data",
                "title" : "var data: [String : String]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/keydto\/frommodel(_:)",
                "title" : "static func fromModel(Key) -> KeyDTO",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/keydto\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/keydto\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/keydto\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/keydto\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/keydto\/decoderequest(_:)-311rp",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/keydto\/decoderequest(_:)-35vsi",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/keydto\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/keydto\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/keydto\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/keydto",
            "title" : "KeyDTO",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestreamcontroller\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestreamcontroller\/boot(routes:)",
                "title" : "func boot(routes: any RoutesBuilder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/livestreamcontroller\/create(req:)",
                "title" : "func create(req: Request) async throws -> LivestreamDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/livestreamcontroller\/delete(req:)",
                "title" : "func delete(req: Request) async throws -> HTTPStatus",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/livestreamcontroller\/index(req:)",
                "title" : "func index(req: Request) async throws -> [LivestreamDTO]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/livestreamcontroller\/show(req:)",
                "title" : "func show(req: Request) async throws -> LivestreamDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/livestreamcontroller\/update(req:)",
                "title" : "func update(req: Request) async throws -> LivestreamDTO",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/app\/livestreamcontroller",
            "title" : "LivestreamController",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/init(id:title:coverurl:content:streamtype:streamurl:status:usercreated:createdat:updatedat:scheduledfor:)",
                "title" : "init(id: UUID?, title: String, coverUrl: UUID, content: String, streamType: LivestreamStreamType, streamUrl: String, status: String, userCreated: UserDTO?, createdAt: Date?, updatedAt: Date?, scheduledFor: Date?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/content",
                "title" : "var content: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/coverurl",
                "title" : "var coverUrl: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/id",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/scheduledfor",
                "title" : "var scheduledFor: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/status",
                "title" : "var status: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/streamtype",
                "title" : "var streamType: LivestreamStreamType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/streamurl",
                "title" : "var streamUrl: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/usercreated",
                "title" : "var userCreated: UserDTO?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestreamdto\/tomodel()",
                "title" : "func toModel() -> Livestream",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamdto\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamdto\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamdto\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamdto\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamdto\/decoderequest(_:)-7puea",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamdto\/decoderequest(_:)-nv2p",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/livestreamdto\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamdto\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/livestreamdto\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/livestreamdto",
            "title" : "LivestreamDTO",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/logindata\/init(email:password:)",
                "title" : "init(email: String, password: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/logindata\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/logindata\/email",
                "title" : "let email: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/logindata\/password",
                "title" : "let password: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/guardmiddleware(throwing:)",
                    "title" : "static func guardMiddleware(throwing: any Error) -> any Middleware",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/redirectmiddleware(makepath:)",
                    "title" : "static func redirectMiddleware(makePath: (Request) -> String) -> any Middleware",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/redirectmiddleware(path:)",
                    "title" : "static func redirectMiddleware(path: String) -> any Middleware",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/logindata\/authenticatable-implementations",
                "title" : "Authenticatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/decoderequest(_:)-4jpje",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/decoderequest(_:)-741ux",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/logindata\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/logindata\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/logindata\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/logindata",
            "title" : "LoginData",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newslettercontroller\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newslettercontroller\/boot(routes:)",
                "title" : "func boot(routes: any RoutesBuilder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/newslettercontroller\/create(req:)",
                "title" : "func create(req: Request) async throws -> NewsLetterDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/newslettercontroller\/delete(req:)",
                "title" : "func delete(req: Request) async throws -> HTTPStatus",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/newslettercontroller\/index(req:)",
                "title" : "func index(req: Request) async throws -> Page<NewsLetterDTO>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/newslettercontroller\/show(req:)",
                "title" : "func show(req: Request) async throws -> NewsLetterDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/newslettercontroller\/update(req:)",
                "title" : "func update(req: Request) async throws -> NewsLetterDTO",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/app\/newslettercontroller",
            "title" : "NewsLetterController",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/init(id:month:year:sourcefile:usercreated:createdat:updatedat:status:)",
                "title" : "init(id: UUID?, month: Int, year: Int, sourceFile: FileModelDTO?, userCreated: UserDTO?, createdAt: Date?, updatedAt: Date?, status: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/id",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/month",
                "title" : "var month: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/sourcefile",
                "title" : "var sourceFile: FileModelDTO?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/usercreated",
                "title" : "var userCreated: UserDTO?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/year",
                "title" : "var year: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/newsletterdto\/tomodel()",
                "title" : "func toModel() -> NewsLetter",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletterdto\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletterdto\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletterdto\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletterdto\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletterdto\/decoderequest(_:)-7fcjq",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletterdto\/decoderequest(_:)-9f0mp",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/newsletterdto\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/newsletterdto\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/newsletterdto\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/newsletterdto",
            "title" : "NewsLetterDTO",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/rbacmiddleware\/init(_:)",
                "title" : "init(PermissionCheck)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/rbacmiddleware\/permissioncheck",
                "title" : "let permissionCheck: PermissionCheck",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/rbacmiddleware\/respond(to:chainingto:)-2jgfe",
                "title" : "func respond(to: Request, chainingTo: any AsyncResponder) async throws -> Response",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rbacmiddleware\/respond(to:chainingto:)-4qcr4",
                    "title" : "func respond(to: Request, chainingTo: any Responder) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/rbacmiddleware\/asyncmiddleware-implementations",
                "title" : "AsyncMiddleware Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/rbacmiddleware\/makeresponder(chainingto:)",
                    "title" : "func makeResponder(chainingTo: any Responder) -> any Responder",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/rbacmiddleware\/middleware-implementations",
                "title" : "Middleware Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/rbacmiddleware",
            "title" : "RBACMiddleware",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/seedkeys\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/seedkeys\/prepare(on:)-6kdxu",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/seedkeys\/revert(on:)-93ic9",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/seedkeys\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/seedkeys\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/seedkeys\/prepare(on:)-7hbn4",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/seedkeys\/revert(on:)-40h7b",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/seedkeys\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/seedkeys",
            "title" : "SeedKeys",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/seedrolepermission\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/seedrolepermission\/prepare(on:)-4azbd",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/seedrolepermission\/revert(on:)-4g22j",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/seedrolepermission\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/seedrolepermission\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/seedrolepermission\/prepare(on:)-76n5c",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/seedrolepermission\/revert(on:)-2qtic",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/seedrolepermission\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/seedrolepermission",
            "title" : "SeedRolePermission",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/seeduser\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/seeduser\/prepare(on:)-15y0l",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/seeduser\/revert(on:)-27wz0",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/seeduser\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/seeduser\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/seeduser\/prepare(on:)-6jg0j",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/seeduser\/revert(on:)-67qh1",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/seeduser\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/seeduser",
            "title" : "SeedUser",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/seeduserrolepermission\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/seeduserrolepermission\/prepare(on:)-8go34",
                "title" : "func prepare(on: any Database) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/seeduserrolepermission\/revert(on:)-2cafx",
                "title" : "func revert(on: any Database) async throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/seeduserrolepermission\/defaultname",
                    "title" : "var defaultName: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/seeduserrolepermission\/name",
                    "title" : "var name: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/seeduserrolepermission\/prepare(on:)-3l60b",
                    "title" : "func prepare(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/seeduserrolepermission\/revert(on:)-9aqde",
                    "title" : "func revert(on: any Database) -> EventLoopFuture<Void>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/seeduserrolepermission\/migration-implementations",
                "title" : "Migration Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/seeduserrolepermission",
            "title" : "SeedUserRolePermission",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tododto\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/tododto\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/tododto\/init(id:title:)",
                "title" : "init(id: UUID?, title: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tododto\/id",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/tododto\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tododto\/tomodel()",
                "title" : "func toModel() -> Todo",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tododto\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/tododto\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/tododto\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tododto\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tododto\/decoderequest(_:)-9mbr0",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/tododto\/decoderequest(_:)-zonj",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/tododto\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tododto\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/tododto\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/tododto",
            "title" : "TodoDTO",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tokenauthenticator\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tokenauthenticator\/authenticate(bearer:for:)",
                "title" : "func authenticate(bearer: BearerAuthorization, for: Request) async throws",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tokenauthenticator\/user",
                "title" : "TokenAuthenticator.User",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenauthenticator\/authenticate(request:)",
                    "title" : "func authenticate(request: Request) async throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/tokenauthenticator\/asyncbearerauthenticator-implementations",
                "title" : "AsyncBearerAuthenticator Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenauthenticator\/respond(to:chainingto:)",
                    "title" : "func respond(to: Request, chainingTo: any Responder) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/tokenauthenticator\/asyncmiddleware-implementations",
                "title" : "AsyncMiddleware Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenauthenticator\/makeresponder(chainingto:)",
                    "title" : "func makeResponder(chainingTo: any Responder) -> any Responder",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/tokenauthenticator\/middleware-implementations",
                "title" : "Middleware Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/tokenauthenticator",
            "title" : "TokenAuthenticator",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tokendto\/init(accesstoken:refreshtoken:expires:)",
                "title" : "init(accessToken: String, refreshToken: String?, expires: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/tokendto\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tokendto\/accesstoken",
                "title" : "var accessToken: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/tokendto\/expires",
                "title" : "var expires: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/tokendto\/refreshtoken",
                "title" : "var refreshToken: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tokendto\/converttopublic()",
                "title" : "func convertToPublic() -> TokenDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/tokendto\/tomodel()",
                "title" : "func toModel() -> Token",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/codingkeys\/accesstoken",
                    "title" : "case accessToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/codingkeys\/refreshtoken",
                    "title" : "case refreshToken",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/codingkeys\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/codingkeys\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/codingkeys\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/tokendto\/codingkeys\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/app\/tokendto\/codingkeys\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/app\/tokendto\/codingkeys\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/tokendto\/codingkeys\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/app\/tokendto\/codingkeys\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/tokendto\/codingkeys\/init(postgresdata:)",
                        "title" : "init?(postgresData: PostgresData)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/tokendto\/codingkeys\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/app\/tokendto\/codingkeys\/postgresdata",
                        "title" : "var postgresData: PostgresData?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/tokendto\/codingkeys\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/tokendto\/codingkeys\/postgresdatatype",
                        "title" : "static var postgresDataType: PostgresDataType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/app\/tokendto\/codingkeys\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/app\/tokendto\/codingkeys",
                "title" : "TokenDTO.CodingKeys",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/decoderequest(_:)-4rpkk",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/decoderequest(_:)-7vy6e",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/tokendto\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokendto\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/tokendto\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/tokendto",
            "title" : "TokenDTO",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userdto\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/userdto\/init(id:firstname:lastname:email:status:role:provider:provideruserid:externalidentifier:memberid:accounttype:emailverified:phonenumberverified:phonenumber:rfid:lifegroupname:address:area:)",
                "title" : "init(id: UUID?, firstName: String?, lastName: String?, email: String?, status: Status?, role: [Roles]?, provider: Provider?, providerUserId: String?, externalIdentifier: String?, memberId: String?, accountType: AccountType?, emailVerified: Bool?, phoneNumberVerified: Bool?, phoneNumber: String?, rfid: String?, lifegroupName: String?, address: String?, area: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userdto\/accounttype",
                "title" : "var accountType: AccountType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/address",
                "title" : "var address: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/area",
                "title" : "var area: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/email",
                "title" : "var email: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/emailverified",
                "title" : "var emailVerified: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/externalidentifier",
                "title" : "var externalIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/firstname",
                "title" : "var firstName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/id",
                "title" : "var id: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/lastname",
                "title" : "var lastName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/lifegroupname",
                "title" : "var lifegroupName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/memberid",
                "title" : "var memberId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/phonenumber",
                "title" : "var phoneNumber: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/phonenumberverified",
                "title" : "var phoneNumberVerified: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/provider",
                "title" : "let provider: Provider?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/provideruserid",
                "title" : "let providerUserId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/rfid",
                "title" : "var rfid: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/role",
                "title" : "var role: [Roles]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userdto\/status",
                "title" : "var status: Status?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userdto\/converttopublic()",
                "title" : "func convertToPublic() -> UserDTO",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/userdto\/tomodel()",
                "title" : "func toModel() -> User",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userdto\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userdto\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userdto\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userdto\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userdto\/decoderequest(_:)-9fgoa",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userdto\/decoderequest(_:)-9xn0i",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/userdto\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userdto\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/userdto\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/userdto",
            "title" : "UserDTO",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/init(scope:subject:expiration:issuedat:issuer:aud:)",
                "title" : "init(scope: String, subject: SubjectClaim, expiration: ExpirationClaim, issuedAt: IssuedAtClaim, issuer: IssuerClaim, aud: AudienceClaim?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/aud",
                "title" : "var aud: AudienceClaim?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/expiration",
                "title" : "var expiration: ExpirationClaim",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/issuedat",
                "title" : "var issuedAt: IssuedAtClaim",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/issuer",
                "title" : "var issuer: IssuerClaim",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/scope",
                "title" : "let scope: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/subject",
                "title" : "var subject: SubjectClaim",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userpayload\/verify(using:)",
                "title" : "func verify(using: some JWTAlgorithm) async throws",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/aud",
                    "title" : "case aud",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/expiration",
                    "title" : "case expiration",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/issuedat",
                    "title" : "case issuedAt",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/issuer",
                    "title" : "case issuer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/scope",
                    "title" : "case scope",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/subject",
                    "title" : "case subject",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/userpayload\/codingkeys\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/app\/userpayload\/codingkeys\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/userpayload\/codingkeys\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/userpayload\/codingkeys\/init(postgresdata:)",
                        "title" : "init?(postgresData: PostgresData)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/userpayload\/codingkeys\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/app\/userpayload\/codingkeys\/postgresdata",
                        "title" : "var postgresData: PostgresData?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/userpayload\/codingkeys\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/app\/userpayload\/codingkeys\/postgresdatatype",
                        "title" : "static var postgresDataType: PostgresDataType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/app\/userpayload\/codingkeys\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/app\/userpayload\/codingkeys",
                "title" : "UserPayload.CodingKeys",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/app\/userpayload",
            "title" : "UserPayload",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userresponse\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/app\/userresponse\/init(user:token:)",
                "title" : "init(user: UserDTO, token: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userresponse\/token",
                "title" : "let token: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/app\/userresponse\/user",
                "title" : "let user: UserDTO",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userresponse\/afterdecode()",
                    "title" : "func afterDecode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userresponse\/beforeencode()",
                    "title" : "func beforeEncode() throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userresponse\/encoderesponse(for:)",
                    "title" : "func encodeResponse(for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userresponse\/defaultcontenttype",
                    "title" : "static var defaultContentType: HTTPMediaType",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userresponse\/decoderequest(_:)-5500r",
                    "title" : "static func decodeRequest(Request) -> EventLoopFuture<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/userresponse\/decoderequest(_:)-553xe",
                    "title" : "static func decodeRequest(Request) async throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/userresponse\/content-implementations",
                "title" : "Content Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/userresponse\/encoderesponse(status:headers:for:)",
                    "title" : "func encodeResponse(status: HTTPStatus, headers: HTTPHeaders, for: Request) -> EventLoopFuture<Response>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/userresponse\/responseencodable-implementations",
                "title" : "ResponseEncodable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/userresponse",
            "title" : "UserResponse",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userscontroller\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/userscontroller\/boot(routes:)",
                "title" : "func boot(routes: any RoutesBuilder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/userscontroller\/firebaseadminauthlistusers(_:)",
                "title" : "func firebaseAdminAuthListUsers(Request) async throws -> Response",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/userscontroller\/index(req:)",
                "title" : "func index(req: Request) async throws -> [UserDTO]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/app\/userscontroller\/show(req:)",
                "title" : "func show(req: Request) async throws -> Response",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/app\/userscontroller",
            "title" : "UsersController",
            "type" : "struct"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/app\/configure(_:)",
            "title" : "func configure(Application) async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/app\/routes(_:)",
            "title" : "func routes(Application) throws",
            "type" : "func"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/accounttype\/managed",
                "title" : "case managed",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/accounttype\/organization",
                "title" : "case organization",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/accounttype\/user",
                "title" : "case user",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/accounttype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/accounttype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/accounttype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/accounttype\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/accounttype\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/accounttype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/accounttype\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/accounttype\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/accounttype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/accounttype\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/accounttype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/accounttype",
            "title" : "AccountType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/contenttype\/applicationdocx",
                "title" : "case applicationDocx",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/contenttype\/applicationpdf",
                "title" : "case applicationPdf",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/contenttype\/imagejpeg",
                "title" : "case imageJpeg",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/contenttype\/imagepng",
                "title" : "case imagePng",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/contenttype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/contenttype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/contenttype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/contenttype\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/contenttype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/contenttype\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/contenttype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/contenttype\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/contenttype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/contenttype",
            "title" : "ContentType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/entrypoint\/main()",
                "title" : "static func main() async throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/app\/entrypoint",
            "title" : "Entrypoint",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/fileerror\/couldnotsave(reason:)",
                "title" : "case couldNotSave(reason: String)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fileerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/fileerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/fileerror",
            "title" : "FileError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/fileextension\/docx",
                "title" : "case docx",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/fileextension\/jpg",
                "title" : "case jpg",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/fileextension\/pdf",
                "title" : "case pdf",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/fileextension\/png",
                "title" : "case png",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/fileextension\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fileextension\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/fileextension\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fileextension\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fileextension\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/fileextension\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fileextension\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fileextension\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/fileextension\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/fileextension",
            "title" : "FileExtension",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestreamstreamtype\/other",
                "title" : "case other",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/livestreamstreamtype\/twitch",
                "title" : "case twitch",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/livestreamstreamtype\/vimeo",
                "title" : "case vimeo",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/livestreamstreamtype\/youtube",
                "title" : "case youtube",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/livestreamstreamtype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamstreamtype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/livestreamstreamtype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamstreamtype\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamstreamtype\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamstreamtype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamstreamtype\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamstreamtype\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamstreamtype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/livestreamstreamtype\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/livestreamstreamtype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/livestreamstreamtype",
            "title" : "LivestreamStreamType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/permission\/createcountries",
                "title" : "case createCountries",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/createevents",
                "title" : "case createEvents",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/createlivestreams",
                "title" : "case createLivestreams",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/createnewsletters",
                "title" : "case createNewsletters",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/createposts",
                "title" : "case createPosts",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/createrequests",
                "title" : "case createRequests",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/createtestimonials",
                "title" : "case createTestimonials",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/deletecountries",
                "title" : "case deleteCountries",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/deleteevents",
                "title" : "case deleteEvents",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/deletelivestreams",
                "title" : "case deleteLivestreams",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/deletenewsletters",
                "title" : "case deleteNewsletters",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/deleteposts",
                "title" : "case deletePosts",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/deleterequests",
                "title" : "case deleteRequests",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/deletetestimonials",
                "title" : "case deleteTestimonials",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/managecountries",
                "title" : "case manageCountries",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/manageevents",
                "title" : "case manageEvents",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/managelivestreams",
                "title" : "case manageLivestreams",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/managenewsletters",
                "title" : "case manageNewsletters",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/manageposts",
                "title" : "case managePosts",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/managerequests",
                "title" : "case manageRequests",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/managetestimonials",
                "title" : "case manageTestimonials",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/readcountries",
                "title" : "case readCountries",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/readevents",
                "title" : "case readEvents",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/readlivestreams",
                "title" : "case readLivestreams",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/readnewsletters",
                "title" : "case readNewsletters",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/readposts",
                "title" : "case readPosts",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/readrequests",
                "title" : "case readRequests",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/readtestimonials",
                "title" : "case readTestimonials",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/updatecountries",
                "title" : "case updateCountries",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/updateevents",
                "title" : "case updateEvents",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/updatelivestreams",
                "title" : "case updateLivestreams",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/updatenewsletters",
                "title" : "case updateNewsletters",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/updateposts",
                "title" : "case updatePosts",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/updaterequests",
                "title" : "case updateRequests",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permission\/updatetestimonials",
                "title" : "case updateTestimonials",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/permission\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/permission\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/permission\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/permission\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/permission\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/permission\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/permission\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/permission\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/permission\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/permission\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/permission\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/permission",
            "title" : "Permission",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/permissioncheck\/all(_:)",
                "title" : "case all([Permission])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permissioncheck\/any(_:)",
                "title" : "case any([Permission])",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/permissioncheck\/custom(_:)",
                "title" : "case custom(([Permission]) -> Bool)",
                "type" : "case"
              }
            ],
            "path" : "\/documentation\/app\/permissioncheck",
            "title" : "PermissionCheck",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/provider\/firebase",
                "title" : "case firebase",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/provider\/local",
                "title" : "case local",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/provider\/other",
                "title" : "case other",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/provider\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/provider\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/provider\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/provider\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/provider\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/provider\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/provider\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/provider\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/provider\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/provider\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/provider\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/provider",
            "title" : "Provider",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/roles\/admin",
                "title" : "case admin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/roles\/manager",
                "title" : "case manager",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/roles\/superadmin",
                "title" : "case superAdmin",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/roles\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/roles\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/roles\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/roles\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/roles\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/roles\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/roles\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/roles\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/roles\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/roles\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/roles\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/roles",
            "title" : "Roles",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/status\/active",
                "title" : "case active",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/status\/inactive",
                "title" : "case inactive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/status\/suspended",
                "title" : "case suspended",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/status\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/status\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/status\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/status\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/status\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/status\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/status\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/status\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/status\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/status\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/status\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/status",
            "title" : "Status",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/storagetype\/local",
                "title" : "case local",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/storagetype\/s3",
                "title" : "case s3",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/storagetype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/storagetype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/storagetype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/storagetype\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/storagetype\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/storagetype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/storagetype\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/storagetype\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/storagetype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/storagetype\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/storagetype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/storagetype",
            "title" : "StorageType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tokenstatus\/active",
                "title" : "case active",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/app\/tokenstatus\/revoked",
                "title" : "case revoked",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/app\/tokenstatus\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenstatus\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/app\/tokenstatus\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenstatus\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenstatus\/init(postgresdata:)",
                    "title" : "init?(postgresData: PostgresData)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenstatus\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenstatus\/postgresdata",
                    "title" : "var postgresData: PostgresData?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenstatus\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenstatus\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/tokenstatus\/postgresdatatype",
                    "title" : "static var postgresDataType: PostgresDataType",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/tokenstatus\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/app\/tokenstatus",
            "title" : "TokenStatus",
            "type" : "enum"
          },
          {
            "title" : "Extended Modules",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Extended Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/cryptokit\/sha256digest\/hex",
                    "title" : "var hex: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/app\/cryptokit\/sha256digest",
                "title" : "SHA256Digest",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/app\/cryptokit",
            "title" : "CryptoKit",
            "type" : "extension"
          },
          {
            "children" : [
              {
                "title" : "Extended Protocols",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/fluentkit\/model\/existing(matching:on:)",
                    "title" : "static func existing(matching: ModelValueFilter<Self>, on: any Database) async throws -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/fluentkit\/model\/isexisting(matching:on:)",
                    "title" : "static func isExisting(matching: ModelValueFilter<Self>, on: any Database) async throws -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/fluentkit\/model",
                "title" : "Model",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/app\/fluentkit",
            "title" : "FluentKit",
            "type" : "extension"
          },
          {
            "children" : [
              {
                "title" : "Extended Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/foundation\/data\/base64urlencodedstring()",
                    "title" : "func base64URLEncodedString() -> String",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/foundation\/data",
                "title" : "Data",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/app\/foundation",
            "title" : "Foundation",
            "type" : "extension"
          },
          {
            "children" : [
              {
                "title" : "Extended Protocols",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/app\/vapor\/routesbuilder\/grouped(customcheck:)",
                    "title" : "func grouped(customCheck: ([Permission]) -> Bool) -> any RoutesBuilder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/vapor\/routesbuilder\/grouped(requireall:)",
                    "title" : "func grouped(requireAll: Permission...) -> any RoutesBuilder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/app\/vapor\/routesbuilder\/grouped(requireany:)",
                    "title" : "func grouped(requireAny: Permission...) -> any RoutesBuilder",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/app\/vapor\/routesbuilder",
                "title" : "RoutesBuilder",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/app\/vapor",
            "title" : "Vapor",
            "type" : "extension"
          }
        ],
        "path" : "\/documentation\/app",
        "title" : "App",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 2
  }
}